# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateTask {
  _count: TaskCountAggregate
  _max: TaskMaxAggregate
  _min: TaskMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Mutation {
  createOneTask(data: TaskCreateInput!): Task!
  createOneUser(data: UserCreateInput!): User!
  deleteManyTask(where: TaskWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneTask(where: TaskWhereUniqueInput!): Task
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyTask(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneTask(create: TaskCreateInput!, update: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

enum NullsOrder {
  first
  last
}

type Query {
  aggregateTask(cursor: TaskWhereUniqueInput, orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): AggregateTask!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstTask(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): Task
  findFirstTaskOrThrow(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): Task
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  getTask(where: TaskWhereUniqueInput!): Task
  getUser(where: UserWhereUniqueInput!): User
  groupByTask(by: [TaskScalarFieldEnum!]!, having: TaskScalarWhereWithAggregatesInput, orderBy: [TaskOrderByWithAggregationInput!], skip: Int, take: Int, where: TaskWhereInput): [TaskGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Task {
  createdAt: DateTime!
  desc: String
  id: ID!
  title: String!
  updatedAt: DateTime!
  user(where: UserWhereInput): User
  userId: String
}

type TaskCountAggregate {
  _all: Int!
  createdAt: Int!
  desc: Int!
  id: Int!
  title: Int!
  updatedAt: Int!
  userId: Int!
}

input TaskCountOrderByAggregateInput {
  desc: SortOrder
  id: SortOrder
  title: SortOrder
  userId: SortOrder
}

input TaskCreateInput {
  desc: String
  id: String
  title: String!
  user: UserCreateNestedOneWithoutTasksInput
}

input TaskCreateNestedManyWithoutUserInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutUserInput!]
  create: [TaskCreateWithoutUserInput!]
}

input TaskCreateOrConnectWithoutUserInput {
  create: TaskCreateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateWithoutUserInput {
  desc: String
  id: String
  title: String!
}

type TaskGroupBy {
  _count: TaskCountAggregate
  _max: TaskMaxAggregate
  _min: TaskMinAggregate
  createdAt: DateTime!
  desc: String
  id: String!
  title: String!
  updatedAt: DateTime!
  userId: String
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

type TaskMaxAggregate {
  createdAt: DateTime
  desc: String
  id: String
  title: String
  updatedAt: DateTime
  userId: String
}

input TaskMaxOrderByAggregateInput {
  desc: SortOrder
  id: SortOrder
  title: SortOrder
  userId: SortOrder
}

type TaskMinAggregate {
  createdAt: DateTime
  desc: String
  id: String
  title: String
  updatedAt: DateTime
  userId: String
}

input TaskMinOrderByAggregateInput {
  desc: SortOrder
  id: SortOrder
  title: SortOrder
  userId: SortOrder
}

input TaskOrderByRelationAggregateInput {
  _count: SortOrder
}

input TaskOrderByWithAggregationInput {
  _count: TaskCountOrderByAggregateInput
  _max: TaskMaxOrderByAggregateInput
  _min: TaskMinOrderByAggregateInput
  desc: SortOrderInput
  id: SortOrder
  title: SortOrder
  userId: SortOrderInput
}

input TaskOrderByWithRelationInput {
  desc: SortOrderInput
  id: SortOrder
  title: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrderInput
}

enum TaskScalarFieldEnum {
  createdAt
  desc
  id
  title
  updatedAt
  userId
}

input TaskScalarWhereInput {
  AND: [TaskScalarWhereInput!]
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  desc: StringNullableFilter
  id: StringFilter
  title: StringFilter
  userId: StringNullableFilter
}

input TaskScalarWhereWithAggregatesInput {
  AND: [TaskScalarWhereWithAggregatesInput!]
  NOT: [TaskScalarWhereWithAggregatesInput!]
  OR: [TaskScalarWhereWithAggregatesInput!]
  desc: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  title: StringWithAggregatesFilter
  userId: StringNullableWithAggregatesFilter
}

input TaskUpdateInput {
  desc: String
  id: String
  title: String
  user: UserUpdateOneWithoutTasksNestedInput
}

input TaskUpdateManyMutationInput {
  desc: String
  id: String
  title: String
}

input TaskUpdateManyWithWhereWithoutUserInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithoutUserNestedInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutUserInput!]
  create: [TaskCreateWithoutUserInput!]
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutUserInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutUserInput!]
}

input TaskUpdateWithWhereUniqueWithoutUserInput {
  data: TaskUpdateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithoutUserInput {
  desc: String
  id: String
  title: String
}

input TaskUpsertWithWhereUniqueWithoutUserInput {
  create: TaskCreateWithoutUserInput!
  update: TaskUpdateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  desc: StringNullableFilter
  id: StringFilter
  title: StringFilter
  user: UserNullableRelationFilter
  userId: StringNullableFilter
}

input TaskWhereUniqueInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  desc: StringNullableFilter
  id: String
  title: StringFilter
  user: UserNullableRelationFilter
  userId: StringNullableFilter
}

type User {
  _count: UserCount
  createdAt: DateTime!
  id: ID!
  name: String!
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  updatedAt: DateTime!
}

type UserCount {
  tasks(where: TaskWhereInput): Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input UserCreateInput {
  id: String
  name: String!
  tasks: TaskCreateNestedManyWithoutUserInput
}

input UserCreateNestedOneWithoutTasksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTasksInput
  create: UserCreateWithoutTasksInput
}

input UserCreateOrConnectWithoutTasksInput {
  create: UserCreateWithoutTasksInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutTasksInput {
  id: String
  name: String!
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
}

type UserMaxAggregate {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input UserMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type UserMinAggregate {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input UserMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  id: SortOrder
  name: SortOrder
}

input UserOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  tasks: TaskOrderByRelationAggregateInput
}

enum UserScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input UserUpdateInput {
  id: String
  name: String
  tasks: TaskUpdateManyWithoutUserNestedInput
}

input UserUpdateManyMutationInput {
  id: String
  name: String
}

input UserUpdateOneWithoutTasksNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTasksInput
  create: UserCreateWithoutTasksInput
  delete: UserWhereInput
  disconnect: UserWhereInput
  update: UserUpdateToOneWithWhereWithoutTasksInput
  upsert: UserUpsertWithoutTasksInput
}

input UserUpdateToOneWithWhereWithoutTasksInput {
  data: UserUpdateWithoutTasksInput!
  where: UserWhereInput
}

input UserUpdateWithoutTasksInput {
  id: String
  name: String
}

input UserUpsertWithoutTasksInput {
  create: UserCreateWithoutTasksInput!
  update: UserUpdateWithoutTasksInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: StringFilter
  name: StringFilter
  tasks: TaskListRelationFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: String
  name: StringFilter
  tasks: TaskListRelationFilter
}
